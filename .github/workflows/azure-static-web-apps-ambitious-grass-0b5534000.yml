name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          lfs: true

      # --- ステップ1: ビルド環境全体のNode.jsバージョンを20に強制 ---
      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm' # npmのキャッシュを有効化し、ビルドを高速化
          cache-dependency-path: |
            app/package-lock.json
            api/package-lock.json

      # --- ステップ2: フロントエンドを手動でビルド ---
      - name: Build Frontend
        working-directory: ./app # 'app'フォルダに移動して
        run: |
          npm install          # 依存関係をインストールし
          npm run build        # ビルドを実行する

      # --- ステップ3: APIの依存関係をインストール ---
      - name: Install API dependencies
        working-directory: ./api # 'api'フォルダに移動して
        run: npm install         # 依存関係をインストールする

      # --- ステップ4: 完成品をAzureにアップロード ---
      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_AMBITIOUS_GRASS_0B5534000 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          
          # ─── 設定の変更点 (最重要) ───
          app_location: "app/dist"  # ★ ビルド済みの完成品フォルダを直接指定します
          api_location: "api"       # APIのソースコードの場所は変更ありません
          skip_app_build: true      # ★ Azure側でのアプリビルドを完全にスキップします
          skip_api_build: true      # ★ APIのビルドもスキップし、ソースと依存関係をそのまま渡します
```